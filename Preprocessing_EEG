clc
clear
%close all
data_num = 1;
hc_pd = 0; % 0==hc and 1==pd


% for HCs::::::::::::
if hc_pd == 0
    
    X = ['...\Dataset\sub-hc',num2str(data_num),'\ses-hc\eeg\sub-hc',num2str(data_num),'_ses-hc_task-rest_eeg.bdf'];
    disp(X)
    EEG = pop_biosig(X);
    EEG.setname=['hc_',num2str(data_num)];
    saved_name = ['hc_',num2str(data_num),'_ready']; % hc1_epoched.set   OR   pd1_off_epoched.set
    EEG = eeg_checkset( EEG );
elseif hc_pd == 1
    % for PDs::::::::::::
    X = ['...\Dataset\sub-pd',num2str(data_num),'\ses-off\eeg\sub-pd',num2str(data_num),'_ses-off_task-rest_eeg.bdf'];
    EEG = pop_biosig(X);
    EEG.setname=['pd_',num2str(data_num),'_off'];
    saved_name = ['pd_',num2str(data_num),'_off_ready']; % hc1_epoched.set   OR   pd1_off_epoched.set
    EEG = eeg_checkset( EEG );
end

% """""""""""""""""""""""""""""""""""""""""""  Main Section """""""""""""""
% 8 EXG unknown channels removal
EEG = pop_select( EEG, 'nochannel',{'EXG1','EXG2','EXG3','EXG4','EXG5','EXG6','EXG7','EXG8'});
EEG = eeg_checkset( EEG );
% channel locations
EEG=pop_chanedit(EEG, 'load',{'D:\\TEHRAN.uni\\THESIS\\Parkinson\\Dataset\\Standard-10-20-revised.ced','filetype','autodetect'});
EEG = eeg_checkset( EEG );
% re_reference
EEG = pop_reref( EEG, [7 24] );
EEG = eeg_checkset( EEG );
% high_pass filter => 0.5 HZ
% import firfilt
EEG = pop_eegfiltnew(EEG, 'locutoff',0.5);
EEG = eeg_checkset( EEG );
% low_pass filter => 50 HZ
EEG = pop_eegfiltnew(EEG, 'hicutoff',50);
EEG = eeg_checkset( EEG );

%EEG = pop_reref( EEG, [7 24] );
EEG = eeg_checkset( EEG );
% visualize
%pop_eegplot( EEG, 1, 1, 1);
figure;
pop_spectopo(EEG, 1, [0      180998.0469], 'EEG' , 'freqrange',[2 80],'electrodes','off');
originalEEG = EEG;
% CleanLine 
figure;
subplot(1,2,1)
pop_spectopo(EEG, 1, [0      180998.0469], 'EEG' , 'freqrange',[40 80],'electrodes','off');
EEG = eeg_checkset( EEG );

EEG = pop_cleanline(EEG, 'bandwidth',2,'chanlist',[1:30] ,'computepower',1,'linefreqs',60,'newversion',0,'normSpectrum',0,'p',0.01,'pad',2,'plotfigures',0,'scanforlines',0,'sigtype','Channels','taperbandwidth',2,'tau',100,'verb',1,'winsize',4,'winstep',1);

EEG = eeg_checkset( EEG );
%EEG = pop_reref( EEG, [7 24] );
EEG = eeg_checkset( EEG );
% spectral visualization
subplot(1,2,2)
pop_spectopo(EEG, 1, [0      180998.0469], 'EEG' , 'freqrange',[40 80],'electrodes','off');

%
originalEEG = EEG;
EEG = pop_clean_rawdata(EEG, 'FlatlineCriterion',5,'ChannelCriterion',0.8,...
    'LineNoiseCriterion',4,'Highpass','off','BurstCriterion',20,...
    'WindowCriterion',0.25,'BurstRejection','on','Distance','Euclidian',...
    'WindowCriterionTolerances',[-Inf 7] );
original_labels = {originalEEG.chanlocs.labels};  % Assuming originalEEG.chanlocs.labels is a cell array of strings
current_labels = {EEG.chanlocs.labels};  % Assuming EEG.chanlocs.labels is a cell array of strings

% Find unique labels in each set
unique_original = setdiff(original_labels, current_labels);
%unique_current = setdiff(current_labels, original_labels);

% Display the unique labels
disp("*********Unique labels in originalEEG.chanlocs.labels:");
disp(unique_original);
%disp("Unique labels in EEG.chanlocs.labels:");
%disp(unique_current);
% Step 8: Interpolate all the removed channels
EEG = pop_interp(EEG, originalEEG.chanlocs, 'spherical');
%%
pop_eegplot( EEG, 1, 1, 1);
%EEG = pop_runica(EEG, 'icatype', 'runica', 'extended',1,'interrupt','on','pca',32);
EEG = eeg_checkset( EEG );
eeg_rank = rank(EEG.data(:,:));
fprintf('***The amount of eeg rank is:::: %d .\n',eeg_rank)
%
% running ICA calculation
EEG = pop_runica(EEG, 'icatype', 'runica', 'extended',1,'interrupt','on','pca', eeg_rank);
% running ICLABEL
EEG = iclabel(EEG, 'default');
EEG = pop_iclabel(EEG, 'default');
pop_viewprops(EEG, 0)
% IC flagging
EEG = pop_icflag(EEG, [NaN NaN;0.8 1;0.8 1;0.8 1;0.8 1;0.8 1;NaN NaN]);
% elimination of targetted flagged ICs
EEG = pop_subcomp( EEG, [], 0);
EEG = eeg_checkset( EEG );
% visualize properties
pop_viewprops(EEG, 0) % for component properties
%pop_viewprops(EEG, 1) % for channel properties

% normalize the data channels (This will normalize each channel and each
% epoch independently.)
% normalization
normdata = zscore(EEG.data,0,2);
EEG.data = normdata;
pop_eegplot( EEG, 1, 1, 1);
%ant = EEG.etc.ic_classification.ICLabel;
clear ant
boogh = sum(EEG.etc.ic_classification.ICLabel.classifications,1)./eeg_rank;
if data_num == 1 && hc_pd == 0
    ant = EEG.etc.ic_classification.ICLabel;
    ant.classifications = boogh;
else
    ant = load('ICLabel_classes_classification.mat').ant;
    ant.classifications = cat(1,ant.classifications,boogh);
end
save('ICLabel_classes_classification.mat', 'ant');

EEG = pop_saveset( EEG, 'filename',saved_name,'filepath','D:\TEHRAN.uni\THESIS\Parkinson\Dataset\All_preprocessed');
EEG = eeg_checkset( EEG );







